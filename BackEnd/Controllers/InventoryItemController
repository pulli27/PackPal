const Inventory = require("../Model/InventoryItemModel");

// GET /inventories
const getAllInventories = async (_req, res) => {
  try {
    const inventories = await Inventory.find().lean();
    // Return 200 with an array (even if empty)
    return res.status(200).json({ inventories });
  } catch (err) {
    console.error("getAllInventories error:", err);
    return res.status(500).json({ message: "Error fetching inventories" });
  }
};

// POST /inventories
const addInventory = async (req, res) => {
  try {
    const { ItemId, ItemName, Description, Quantity, ReOrder_Level, Unit_Price } = req.body;

    if (ItemId === undefined || !ItemName) {
      return res.status(400).json({ message: "ItemId and ItemName are required" });
    }

    const exists = await Inventory.findOne({ ItemId });
    if (exists) return res.status(409).json({ message: "ItemId already exists" });

    const inventory = await Inventory.create({
      ItemId,
      ItemName,
      Description,
      Quantity,
      ReOrder_Level,
      Unit_Price,
    });

    return res.status(201).json({ inventory });
  } catch (err) {
    console.error("addInventory error:", err);
    return res.status(500).json({ message: "Error adding inventory" });
  }
};

// GET /inventories/:id
const getById = async (req, res) => {
  try {
    const inventory = await Inventory.findById(req.params.id).lean();
    if (!inventory) return res.status(404).json({ message: "Inventory not found" });
    return res.status(200).json({ inventory });
  } catch (err) {
    console.error("getById error:", err);
    return res.status(500).json({ message: "Server error" });
  }
};

// PUT /inventories/:id
const updateInventory = async (req, res) => {
  try {
    const { ItemId, ItemName, Description, Quantity, ReOrder_Level, Unit_Price } = req.body;

    const before = await Inventory.findById(req.params.id).lean();
    if (!before) return res.status(404).json({ message: "Inventory not found" });

    const after = await Inventory.findByIdAndUpdate(
      req.params.id,
      { ItemId, ItemName, Description, Quantity, ReOrder_Level, Unit_Price },
      { new: true, runValidators: true }
    ).lean();

    return res.status(200).json({
      message: "Inventory updated successfully",
      beforeUpdate: before,
      afterUpdate: after,
    });
  } catch (err) {
    console.error("updateInventory error:", err);
    return res.status(500).json({ message: "Server error while updating inventory" });
  }
};

// DELETE /inventories/:id
const deleteInventory = async (req, res) => {
  try {
    const deleted = await Inventory.findByIdAndDelete(req.params.id).lean();
    if (!deleted) return res.status(404).json({ message: "Inventory not found" });
    return res.status(200).json({ message: "Inventory deleted successfully", deletedInventory: deleted });
  } catch (err) {
    console.error("deleteInventory error:", err);
    return res.status(500).json({ message: "Unable to delete inventory" });
  }
};

exports.getAllInventories = getAllInventories;
exports.addInventory = addInventory;
exports.getById = getById;
exports.updateInventory = updateInventory;
exports.deleteInventory = deleteInventory;
